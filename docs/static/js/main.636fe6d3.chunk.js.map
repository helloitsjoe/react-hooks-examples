{"version":3,"sources":["utils.js","useFetch.js","03-Vacation.js","index.js"],"names":["placeMap","Paris","Rome","Boston","Tokyo","fetchData","place","ms","arguments","length","undefined","Promise","resolve","reject","setTimeout","Math","random","getRandom","items","currItem","item","floor","useFetchWithState","_useState","useState","_useState2","Object","slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","_useState5","_useState6","data","setData","_useState7","_useState8","activity","setActivity","_useState9","keys","_useState10","setPlace","useLayoutEffect","then","catch","err","setRandomActivity","setRandomPlace","Fallback","_ref","react_default","a","createElement","data-testid","className","style","color","ReactDOM","render","_useFetch","useFetch","_03_Vacation_Fallback","onClick","document","getElementById"],"mappings":"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","file":"static/js/main.636fe6d3.chunk.js","sourcesContent":["export const placeMap = {\n  Paris: [\n    'Ate a baguette',\n    'Said \"merci\" a lot',\n    'Wore a beret',\n    'Ate a croissant',\n    'Changed diapers'\n  ],\n  Rome: [\n    'Ate a pizza',\n    'Ate gelato every day',\n    'Fought a gladiator',\n    'Said \"grazie\" a lot',\n    'Changed diapers'\n  ],\n  Boston: [\n    'Ate a lobster roll',\n    'Did not say \"cah\"',\n    'Went to Harvard Yard',\n    'Changed diapers',\n    'Rode a Swan Boat'\n  ],\n  Tokyo: [\n    'Ate a tuna roll',\n    'Said \"arigato\" a lot',\n    'Ate a mochi',\n    'Did not watch anime',\n    'Changed diapers'\n  ]\n};\n\nexport function fetchData(place, ms = 500) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (Math.random() < 0.1) {\n        return reject('Something went wrong!');\n      }\n\n      resolve(placeMap[place]);\n    }, ms);\n  });\n}\n\nexport function getRandom(items, currItem) {\n  const item = items[Math.floor(Math.random() * items.length)];\n  if (item === currItem) return getRandom(items, currItem);\n  return item;\n}\n","import { useLayoutEffect, useState, useReducer } from 'react';\nimport { getRandom, fetchData, placeMap } from './utils';\n\n// Here are 3 different implementations of a custom hook that exposes the same API.\n// Swap them with the default export at the bottom of the file.\n\n// Custom hook using useState to fetch data\nfunction useFetchWithState() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [data, setData] = useState([]);\n  const [activity, setActivity] = useState('');\n  const [place, setPlace] = useState(getRandom(Object.keys(placeMap)));\n\n  // useEffect flashes before data fetching, useLayoutEffect runs before browser paint\n  useLayoutEffect(() => {\n    setLoading(true);\n    setError(false);\n    fetchData(place)\n      .then(data => {\n        setLoading(false);\n        setActivity(getRandom(data));\n        setData(data);\n      })\n      .catch(err => {\n        setLoading(false);\n        setError(true);\n      });\n  }, [place]);\n\n  const setRandomPlace = () => setPlace(Object.keys(placeMap));\n  const setRandomActivity = () => setActivity(getRandom(data, activity));\n\n  return { loading, error, place, activity, setRandomActivity, setRandomPlace };\n}\n\n// Custom hook using useState to fetch data, storing all state in a single object.\nfunction useFetchWithSingleState() {\n  // Note: this is closer to how setState works in class components, but note that\n  // useState doesn't automatically merge with the existing state so you must do\n  // it manually. The React docs recommend either splitting state into variables\n  // that tend to change together, or using useReducer hook (see below).\n  // https://reactjs.org/docs/hooks-faq.html#should-i-use-one-or-many-state-variables\n  const initialState = {\n    loading: false,\n    error: false,\n    data: [],\n    activity: '',\n    place: getRandom(Object.keys(placeMap)),\n  };\n\n  const [state, setState] = useState(initialState);\n  const updateState = newState => setState(s => ({ ...s, ...newState }));\n\n  useLayoutEffect(() => {\n    updateState({ loading: true, error: false });\n    fetchData(state.place)\n      .then(data => {\n        updateState({\n          loading: false,\n          activity: getRandom(data),\n          data,\n        });\n      })\n      .catch(err => updateState({ loading: false, error: true }));\n  }, [state.place]);\n\n  const setRandomPlace = () =>\n    updateState({ place: getRandom(Object.keys(placeMap)) });\n  const setRandomActivity = () =>\n    updateState({ activity: getRandom(data, state.activity) });\n\n  const { data, ...rest } = state;\n  return { ...rest, setRandomActivity, setRandomPlace };\n}\n\n// Custom hook using useReducer to fetch data\nfunction useFetchWithReducer() {\n  const initialState = {\n    loading: false,\n    error: false,\n    data: [],\n    activity: '',\n    place: getRandom(Object.keys(placeMap)),\n  };\n\n  const [state, dispatch] = useReducer((state, action) => {\n    switch (action.type) {\n      case 'FETCHING':\n        return {\n          ...state,\n          loading: true,\n          error: false,\n        };\n      case 'SUCCESS':\n        return {\n          ...state,\n          loading: false,\n          data: action.data,\n          activity: getRandom(action.data),\n        };\n      case 'ERROR':\n        return {\n          ...state,\n          loading: false,\n          error: true,\n        };\n      case 'NEW_ACTIVITY':\n        return {\n          ...state,\n          activity: getRandom(state.data, state.activity),\n        };\n      case 'NEW_PLACE':\n        return {\n          ...state,\n          place: getRandom(Object.keys(placeMap), state.place),\n        };\n      default:\n        return state;\n    }\n  }, initialState);\n\n  useLayoutEffect(() => {\n    dispatch({ type: 'FETCHING' });\n    fetchData(state.place)\n      .then(data => {\n        dispatch({ type: 'SUCCESS', data });\n      })\n      .catch(err => {\n        dispatch({ type: 'ERROR' });\n      });\n  }, [state.place]);\n\n  const setRandomPlace = () => dispatch({ type: 'NEW_PLACE' });\n  const setRandomActivity = () => dispatch({ type: 'NEW_ACTIVITY' });\n  const { data, ...rest } = state;\n  return { ...rest, setRandomActivity, setRandomPlace };\n}\n\nexport default useFetchWithState;\n// export default useFetchWithReducer;\n// export default useFetchWithSingleState;\n","import React from 'react';\nimport useFetch from './useFetch';\nimport './App.css';\n\n// HOOKS-BASED IMPLEMENTATION, SEE CLASS BELOW FOR REFERENCE\nexport default function Vacation() {\n  const {\n    loading,\n    error,\n    place,\n    activity,\n    setRandomActivity,\n    setRandomPlace\n  } = useFetch();\n\n  if (loading || error) return <Fallback loading={loading} error={error} />;\n\n  return (\n    <div className=\"App\">\n      <h1 data-testid=\"vacation-title\">\n        What I did on my <span style={{ color: 'purple' }}>{place}</span>{' '}\n        vacation:\n      </h1>\n      <h2>{activity}</h2>\n      <button onClick={setRandomActivity}>What else?</button>\n      <button onClick={setRandomPlace}>Where else?</button>\n    </div>\n  );\n}\n\n// CLASS-BASED IMPLEMENTATION\n\n// export default class Vacation extends React.Component {\n//   state = {\n//     loading: false,\n//     error: false,\n//     data: [],\n//     activity: '',\n//     place: getRandom(Object.keys(placeMap)),\n//   };\n\n//   componentDidMount() {\n//     this.fetch(this.state.place);\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.place !== prevState.place) {\n//       this.fetch(this.state.place);\n//     }\n//   }\n\n//   fetch = place => {\n//     this.setState({ loading: true, error: false });\n//     fetchData(place)\n//       .then(data => {\n//         this.setState({\n//           loading: false,\n//           activity: getRandom(data),\n//           data,\n//         });\n//       })\n//       .catch(err => {\n//         this.setState({ loading: false, error: true });\n//       });\n//   };\n\n//   setRandomActivity = () =>\n//     this.setState(state => ({\n//       activity: getRandom(state.data, state.activity),\n//     }));\n\n//   setRandomPlace = () =>\n//     this.setState(state => ({\n//       place: getRandom(Object.keys(placeMap), state.place),\n//     }));\n\n//   render() {\n//     const { loading, error, activity, place } = this.state;\n\n//     if (loading || error) return <Fallback loading={loading} error={error} />;\n\n//     return (\n//       <div className=\"App\">\n//         <h1>\n//           What I did on my <span style={{ color: 'purple' }}>{place}</span>{' '}\n//           vacation:\n//         </h1>\n//         <h2>{activity}</h2>\n//         <button onClick={this.setRandomActivity}>What else?</button>\n//         <button onClick={this.setRandomPlace}>Where else?</button>\n//       </div>\n//     );\n//   }\n// }\n\nconst Fallback = ({ loading, error }) => {\n  return (\n    <div data-testid=\"fallback\" className=\"App\">\n      {loading ? (\n        <h1>Loading...</h1>\n      ) : (\n        <h1 style={{ color: 'red' }}>Error! {error}</h1>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import App from './01-Counter';\n// import App from './02-Clock';\nimport App from './03-Vacation';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}