{"version":3,"sources":["02-Clock.js","utils.js","useFetch.js","03-Vacation.js","App.js","01-Counter.js","index.js"],"names":["MountedClock","_useState","useState","_useState2","Object","slicedToArray","count","setCount","_useState3","_useState4","paused","setPaused","useEffect","interval","setInterval","e","clearInterval","react_default","a","createElement","className","onClick","Clock","state","mounted","toggleMount","_this","setState","p","this","React","Component","placeMap","Paris","Rome","Boston","Tokyo","fetchData","place","ms","arguments","length","undefined","Promise","resolve","reject","setTimeout","Math","random","getRandom","items","currItem","item","floor","useFetchWithState","loading","setLoading","error","setError","_useState5","_useState6","data","setData","_useState7","_useState8","activity","setActivity","_useState9","keys","_useState10","setPlace","useLayoutEffect","then","catch","err","setRandomActivity","setRandomPlace","Fallback","_ref","data-testid","style","color","AppContext","createContext","componentMap","Counter","step","setStep","c","s","Vacation","_useFetch","useFetch","_03_Vacation_Fallback","Button","app","_useContext","useContext","current","setCurrent","disabled","ReactDOM","render","Provider","value","document","getElementById"],"mappings":"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","file":"static/js/main.b5626fee.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\n// HOOKS-BASED IMPLEMENTATION - SEE CLASS BELOW FOR REFERENCE\nfunction MountedClock() {\n  const [count, setCount] = useState(0);\n  const [paused, setPaused] = useState(false);\n\n  useEffect(() => {\n    // This setInterval gets cleaned up and recreated every time useEffect runs\n    // (console log `interval` to see the ID changing on every update)\n    const interval = setInterval(() => {\n      setCount(e => e + 1);\n    }, 100);\n\n    if (paused) {\n      clearInterval(interval);\n    }\n\n    // The function returned from `useEffect` gets called before unmount\n    // (in fact, it gets called every time useEffect is called, which you\n    // can see by putting a console log in here). To see why we need to\n    // clear the interval in unmount, comment out this function.\n    return () => {\n      clearInterval(interval);\n    };\n\n    // Adding `paused` to deps array makes this useEffect act like\n    // componentDidUpdate - it will update every time any values\n    // in the array change. With an empty array, it would act like\n    // componentDidMount, only getting called once on mount.\n  }, [paused]);\n\n  return (\n    <div className=\"App\">\n      <h2>Count:</h2>\n      <h1>{count}</h1>\n      <button onClick={() => setPaused(!paused)}>{paused ? 'Resume' : 'Pause'}</button>\n      <button onClick={() => setCount(0)}>Reset</button>\n    </div>\n  );\n}\n\n// CLASS-BASED IMPLEMENTATION\n\n// class Clock extends React.Component {\n//   state = {\n//     count: 0,\n//     five: false,\n//   };\n\n//   interval = null;\n\n//   componentDidMount() {\n//     this.interval = setInterval(() => {\n//       this.setState(prevState => ({ count: prevState.count + 1 }));\n//     }, 500);\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.count === this.state.count) return;\n//     this.setState(prevState => {\n//       if (prevState.count % 5) return { five: false };\n//       return { five: true };\n//     });\n//   }\n\n//   componentWillUnmount() {\n//     clearInterval(this.interval);\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h2>Count:</h2>\n//         <h1>{this.state.count}</h1>\n//         {this.state.five && <h4>Five!</h4>}\n//       </div>\n//     );\n//   }\n// }\n\n// Notice that we can use hooks and classes together\nexport default class Clock extends React.Component {\n  state = {\n    mounted: false\n  };\n\n  toggleMount = () => this.setState(p => ({ mounted: !p.mounted }));\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={this.toggleMount}>Mount/Unmount</button>\n        {this.state.mounted && <MountedClock />}\n      </div>\n    );\n  }\n}\n","export const placeMap = {\n  Paris: [\n    'Ate a baguette',\n    'Said \"merci\" a lot',\n    'Wore a beret',\n    'Ate a croissant',\n    'Changed diapers'\n  ],\n  Rome: [\n    'Ate a pizza',\n    'Ate gelato every day',\n    'Fought a gladiator',\n    'Said \"grazie\" a lot',\n    'Changed diapers'\n  ],\n  Boston: [\n    'Ate a lobster roll',\n    'Did not say \"cah\"',\n    'Went to Harvard Yard',\n    'Changed diapers',\n    'Rode a Swan Boat'\n  ],\n  Tokyo: [\n    'Ate a tuna roll',\n    'Said \"arigato\" a lot',\n    'Ate a mochi',\n    'Did not watch anime',\n    'Changed diapers'\n  ]\n};\n\nexport function fetchData(place, ms = 500) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (Math.random() < 0.1) {\n        return reject('Something went wrong!');\n      }\n\n      resolve(placeMap[place]);\n    }, ms);\n  });\n}\n\nexport function getRandom(items, currItem) {\n  const item = items[Math.floor(Math.random() * items.length)];\n  if (item === currItem) return getRandom(items, currItem);\n  return item;\n}\n","import { useLayoutEffect, useState, useReducer } from 'react';\nimport { getRandom, fetchData, placeMap } from './utils';\n\n// Here are 3 different implementations of a custom hook that exposes the same API.\n// Swap them with the default export at the bottom of the file.\n\n// Custom hook using useState to fetch data\nfunction useFetchWithState() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [data, setData] = useState([]);\n  const [activity, setActivity] = useState('');\n  const [place, setPlace] = useState(getRandom(Object.keys(placeMap)));\n\n  // useEffect flashes before data fetching, useLayoutEffect runs before browser paint\n  useLayoutEffect(() => {\n    setLoading(true);\n    setError(false);\n    fetchData(place)\n      .then(data => {\n        setLoading(false);\n        setActivity(getRandom(data));\n        setData(data);\n      })\n      .catch(err => {\n        setLoading(false);\n        setError(true);\n      });\n  }, [place]);\n\n  const setRandomPlace = () => setPlace(Object.keys(placeMap));\n  const setRandomActivity = () => setActivity(getRandom(data, activity));\n\n  return { loading, error, place, activity, setRandomActivity, setRandomPlace };\n}\n\n// Custom hook using useState to fetch data, storing all state in a single object.\nfunction useFetchWithSingleState() {\n  // Note: this is closer to how setState works in class components, but note that\n  // useState doesn't automatically merge with the existing state so you must do\n  // it manually. The React docs recommend either splitting state into variables\n  // that tend to change together, or using useReducer hook (see below).\n  // https://reactjs.org/docs/hooks-faq.html#should-i-use-one-or-many-state-variables\n  const initialState = {\n    loading: false,\n    error: false,\n    data: [],\n    activity: '',\n    place: getRandom(Object.keys(placeMap)),\n  };\n\n  const [state, setState] = useState(initialState);\n  const updateState = newState => setState(s => ({ ...s, ...newState }));\n\n  useLayoutEffect(() => {\n    updateState({ loading: true, error: false });\n    fetchData(state.place)\n      .then(data => {\n        updateState({\n          loading: false,\n          activity: getRandom(data),\n          data,\n        });\n      })\n      .catch(err => updateState({ loading: false, error: true }));\n  }, [state.place]);\n\n  const setRandomPlace = () =>\n    updateState({ place: getRandom(Object.keys(placeMap)) });\n  const setRandomActivity = () =>\n    updateState({ activity: getRandom(data, state.activity) });\n\n  const { data, ...rest } = state;\n  return { ...rest, setRandomActivity, setRandomPlace };\n}\n\n// Custom hook using useReducer to fetch data\nfunction useFetchWithReducer() {\n  const initialState = {\n    loading: false,\n    error: false,\n    data: [],\n    activity: '',\n    place: getRandom(Object.keys(placeMap)),\n  };\n\n  const [state, dispatch] = useReducer((state, action) => {\n    switch (action.type) {\n      case 'FETCHING':\n        return {\n          ...state,\n          loading: true,\n          error: false,\n        };\n      case 'SUCCESS':\n        return {\n          ...state,\n          loading: false,\n          data: action.data,\n          activity: getRandom(action.data),\n        };\n      case 'ERROR':\n        return {\n          ...state,\n          loading: false,\n          error: true,\n        };\n      case 'NEW_ACTIVITY':\n        return {\n          ...state,\n          activity: getRandom(state.data, state.activity),\n        };\n      case 'NEW_PLACE':\n        return {\n          ...state,\n          place: getRandom(Object.keys(placeMap), state.place),\n        };\n      default:\n        return state;\n    }\n  }, initialState);\n\n  useLayoutEffect(() => {\n    dispatch({ type: 'FETCHING' });\n    fetchData(state.place)\n      .then(data => {\n        dispatch({ type: 'SUCCESS', data });\n      })\n      .catch(err => {\n        dispatch({ type: 'ERROR' });\n      });\n  }, [state.place]);\n\n  const setRandomPlace = () => dispatch({ type: 'NEW_PLACE' });\n  const setRandomActivity = () => dispatch({ type: 'NEW_ACTIVITY' });\n  const { data, ...rest } = state;\n  return { ...rest, setRandomActivity, setRandomPlace };\n}\n\nexport default useFetchWithState;\n// export default useFetchWithReducer;\n// export default useFetchWithSingleState;\n","import React from 'react';\nimport useFetch from './useFetch';\nimport './App.css';\n\n// HOOKS-BASED IMPLEMENTATION, SEE CLASS BELOW FOR REFERENCE\nexport default function Vacation() {\n  const {\n    loading,\n    error,\n    place,\n    activity,\n    setRandomActivity,\n    setRandomPlace\n  } = useFetch();\n\n  if (loading || error) return <Fallback loading={loading} error={error} />;\n\n  return (\n    <div className=\"App\">\n      <h1 data-testid=\"vacation-title\">\n        What I did on my <span style={{ color: 'purple' }}>{place}</span>{' '}\n        vacation:\n      </h1>\n      <h2>{activity}</h2>\n      <button onClick={setRandomActivity}>What else?</button>\n      <button onClick={setRandomPlace}>Where else?</button>\n    </div>\n  );\n}\n\n// CLASS-BASED IMPLEMENTATION\n\n// export default class Vacation extends React.Component {\n//   state = {\n//     loading: false,\n//     error: false,\n//     data: [],\n//     activity: '',\n//     place: getRandom(Object.keys(placeMap)),\n//   };\n\n//   componentDidMount() {\n//     this.fetch(this.state.place);\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.place !== prevState.place) {\n//       this.fetch(this.state.place);\n//     }\n//   }\n\n//   fetch = place => {\n//     this.setState({ loading: true, error: false });\n//     fetchData(place)\n//       .then(data => {\n//         this.setState({\n//           loading: false,\n//           activity: getRandom(data),\n//           data,\n//         });\n//       })\n//       .catch(err => {\n//         this.setState({ loading: false, error: true });\n//       });\n//   };\n\n//   setRandomActivity = () =>\n//     this.setState(state => ({\n//       activity: getRandom(state.data, state.activity),\n//     }));\n\n//   setRandomPlace = () =>\n//     this.setState(state => ({\n//       place: getRandom(Object.keys(placeMap), state.place),\n//     }));\n\n//   render() {\n//     const { loading, error, activity, place } = this.state;\n\n//     if (loading || error) return <Fallback loading={loading} error={error} />;\n\n//     return (\n//       <div className=\"App\">\n//         <h1>\n//           What I did on my <span style={{ color: 'purple' }}>{place}</span>{' '}\n//           vacation:\n//         </h1>\n//         <h2>{activity}</h2>\n//         <button onClick={this.setRandomActivity}>What else?</button>\n//         <button onClick={this.setRandomPlace}>Where else?</button>\n//       </div>\n//     );\n//   }\n// }\n\nconst Fallback = ({ loading, error }) => {\n  return (\n    <div data-testid=\"fallback\" className=\"App\">\n      {loading ? (\n        <h1>Loading...</h1>\n      ) : (\n        <h1 style={{ color: 'red' }}>Error! {error}</h1>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useContext } from 'react';\nimport Counter from './01-Counter';\nimport Clock from './02-Clock';\nimport Vacation from './03-Vacation';\nimport './App.css';\n\nconst AppContext = React.createContext();\n\nconst componentMap = {\n  Counter,\n  Clock,\n  Vacation\n}\n\nfunction Button({ app }) {\n  const { current, setCurrent } = useContext(AppContext);\n  return (\n    <button\n      className=\"global-button\"\n      disabled={current === app}\n      onClick={() => setCurrent(app)}\n    >\n      {app}\n    </button>\n  );\n}\n\nexport default function App() {\n  const [current, setCurrent] = useState('Counter');\n  const Component = componentMap[current];\n\n  return (\n    <AppContext.Provider value={{ current, setCurrent }}>\n      <div className=\"App\">\n        <Button app={'Counter'} />\n        <Button app={'Clock'} />\n        <Button app={'Vacation'} />\n        <Component />\n      </div>\n    </AppContext.Provider>\n  );\n}\n","import React, { useState, useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n\n// HOOKS-BASED IMPLEMENTATION - SEE CLASS BELOW FOR REFERENCE\nexport default function Counter() {\n  const [count, setCount] = useState(0);\n  const [step, setStep] = useState(1);\n\n  const increment = () => setCount(c => c + step);\n  const decrement = () => setCount(c => c - step);\n  const incrementStep = () => setStep(s => s + 1);\n  const decrementStep = () => setStep(s => s - 1);\n\n  return (\n    <div className=\"App\">\n      <h1>Current count:</h1>\n      <h1>{count}</h1>\n      <button onClick={increment}>+</button>\n      <button onClick={decrement}>-</button>\n      <div>\n        <h2>Current step: {step}</h2>\n        <button onClick={incrementStep}>Step +</button>\n        <button onClick={decrementStep}>Step -</button>\n      </div>\n    </div>\n  );\n}\n\n////////////////////////////////////////////\n// NAIVE `useState` HOOK IMPLEMENTATION\n// (comment out the `useState` import and uncomment this to see it in action)\n\n// const statesArray = [];\n// let useStateCallIndex = -1;\n\n// function useState(initialValue) {\n//   const currentCall = useStateCallIndex++;\n//   const existing = statesArray[currentCall];\n\n//   if (existing) return existing;\n\n//   function setValue(newValue) {\n//     if (typeof newValue !== 'function') {\n//       statesArray[currentCall][0] = newValue;\n//     } else {\n//       const oldValue = statesArray[currentCall][0];\n//       statesArray[currentCall][0] = newValue(oldValue);\n//     }\n//     render();\n//   }\n\n//   const state = [initialValue, setValue];\n//   statesArray[currentCall] = state;\n//   return state;\n// }\n\n// function render() {\n//   useStateCallIndex = -1;\n//   ReactDOM.render(<Counter />, document.getElementById('root'));\n// }\n\n// render();\n\n////////////////////////////////////////////\n// CLASS-BASED IMPLEMENTATION\n\n// export default class Counter extends React.Component {\n//   state = {\n//     count: 0,\n//     step: 1\n//   };\n\n//   increment = () => this.setState(prev => ({ count: prev.count + prev.step }));\n//   decrement = () => this.setState(prev => ({ count: prev.count - prev.step }));\n//   incrementStep = () => this.setState(prev => ({ step: prev.step + 1 }));\n//   decrementStep = () => this.setState(prev => ({ step: prev.step - 1 }));\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <h1>Current count:</h1>\n//         <h1>{this.state.count}</h1>\n//         <button onClick={this.increment}>+</button>\n//         <button onClick={this.decrement}>-</button>\n//         <div>\n//           <h2>Current step: {this.state.step}</h2>\n//           <button onClick={this.incrementStep}>Step +</button>\n//           <button onClick={this.decrementStep}>Step -</button>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}